// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

model Users {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  username     String
  password     String
  avatar_id    Int
  avatar       Images      @relation(fields: [avatar_id], references: [id])
  user_type_id Int
  user_types   UserTypes   @relation(fields: [user_type_id], references: [id])
  created_at   DateTime    @default(now())
  updated_at   DateTime    @default(now()) @updatedAt
  sessions     Sessions[]
  favorites    Favorites[]
  progress     Progress[]

  @@map("users")
}

model UserTypes {
  id   Int     @id @default(autoincrement())
  name String
  user Users[]

  @@map("user_types")
}

model Sessions {
  uuid       String   @id
  user_id    Int
  user       Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())

  @@map("sessions")
}

model Favorites {
  user_id    Int
  user       Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  webtoon_id Int
  webtoon    Webtoons @relation(fields: [webtoon_id], references: [id], onDelete: Cascade)

  @@id([user_id, webtoon_id])
  @@map("favorites")
}

model Progress {
  user_id    Int
  user       Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  episode_id Int
  episode    Episodes @relation(fields: [episode_id], references: [id], onDelete: Cascade)
  progress   Int      @default(0)

  @@id([user_id, episode_id])
  @@map("progress")
}

model ImageTypes {
  id    Int      @id @default(autoincrement())
  name  String
  image Images[]

  @@map("image_types")
}

model Images {
  id                Int             @id @default(autoincrement())
  sum               String          @unique
  type_id           Int
  type              ImageTypes      @relation(fields: [type_id], references: [id])
  thumbnail         Webtoons?       @relation("thumbnail")
  background_banner Webtoons?       @relation("background_banner")
  top_banner        Webtoons?       @relation("top_banner")
  mobile_banner     Webtoons?       @relation("mobile_banner")
  episodes          Episodes[]
  episode_images    EpisodeImages[]
  users             Users[]

  @@map("images")
}

model Genres {
  id             Int             @id @default(autoincrement())
  name           String
  webtoon_genres WebtoonGenres[]

  @@map("genres")
}

model WebtoonGenres {
  webtoon_id Int
  genre_id   Int
  webtoon    Webtoons @relation(fields: [webtoon_id], references: [id], onDelete: Cascade)
  genre      Genres   @relation(fields: [genre_id], references: [id])

  @@id([webtoon_id, genre_id])
  @@map("webtoon_genres")
}

model Webtoons {
  id                   Int             @id @default(autoincrement())
  title                String
  author               String
  language             String
  thumbnail_id         Int             @unique
  thumbnail            Images          @relation(fields: [thumbnail_id], references: [id], name: "thumbnail")
  background_banner_id Int             @unique
  background_banner    Images          @relation(fields: [background_banner_id], references: [id], name: "background_banner")
  top_banner_id        Int             @unique
  top_banner           Images          @relation(fields: [top_banner_id], references: [id], name: "top_banner")
  mobile_banner_id     Int             @unique
  mobile_banner        Images          @relation(fields: [mobile_banner_id], references: [id], name: "mobile_banner")
  created_at           DateTime        @default(now())
  updated_at           DateTime        @default(now()) @updatedAt
  genres               WebtoonGenres[]
  episodes             Episodes[]
  favorites            Favorites[]

  @@unique([title, author, language])
  @@map("webtoons")
}

model Episodes {
  id             Int             @id @default(autoincrement())
  title          String
  number         Int
  webtoon_id     Int
  webtoon        Webtoons        @relation(fields: [webtoon_id], references: [id], onDelete: Cascade)
  thumbnail_id   Int
  thumbnail      Images          @relation(fields: [thumbnail_id], references: [id])
  created_at     DateTime        @default(now())
  episode_images EpisodeImages[]
  progress       Progress[]

  @@unique([webtoon_id, number])
  @@map("episodes")
}

model EpisodeImages {
  number     Int
  episode_id Int
  episode    Episodes @relation(fields: [episode_id], references: [id], onDelete: Cascade)
  image_id   Int
  image      Images   @relation(fields: [image_id], references: [id])

  @@id([episode_id, number])
  @@map("episode_images")
}
