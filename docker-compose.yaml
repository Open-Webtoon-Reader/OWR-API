services:
  owr-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      no_cache: true
    container_name: owr-api
    environment:
      - SERVICE_FQDN_OWR_4000
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres
      - FILESYSTEM=${FILESYSTEM:-local}
      - ADMIN_KEY=${ADMIN_KEY}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_PORT=${S3_PORT}
      - S3_USE_SSL=${S3_USE_SSL:-true}
      - S3_REGION=${S3_REGION}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_STORAGE_CLASS=${S3_STORAGE_CLASS:-EXPRESS_ONEZONE}
      - S3_BATCH_SIZE=${S3_BATCH_SIZE:-45}
    expose:
      - 4000
    depends_on:
      - postgres
    volumes:
      - owr-cache:/app/.cache
      - owr-images:/app/images
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:4000/version" ]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:17
    container_name: owr-postgres
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=postgres
      - POSTGRES_PORT=5432
    volumes:
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 30s
      timeout: 10s
      retries: 3
